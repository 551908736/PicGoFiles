import java.nio.channels.FileChannel
import java.util.regex.Matcher
import java.util.regex.Pattern

class FileUtils {

    /**
     * 向文件夹保存文件
     *
     * @param floderFile      要保存文件的文件夹
     * @param fileName        文件名
     * @param fileContentData 文件内容
     */
    public static void saveFileToFolder(File floderFile, String fileName, String fileContentData) {
        File createFile = new File(floderFile, fileName);


        //先删除旧的file
        if (createFile.exists()) {
            boolean delete = createFile.delete();
        }

        try {
            boolean create = createFile.createNewFile()
        } catch (IOException e) {
        }

        if (createFile.exists()) {
            FileOutputStream outputStream = null;
            OutputStreamWriter outputStreamWriter = null;
            BufferedWriter writer = null;
            try {
                outputStream = new FileOutputStream(createFile);
                outputStreamWriter = new OutputStreamWriter(outputStream);
                writer = new BufferedWriter(outputStreamWriter);
                writer.write(fileContentData);
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    if (writer != null) {
                        writer.close();
                    }
                    if (outputStreamWriter != null) {
                        outputStream.close();
                    }
                    if (outputStream != null) {
                        outputStream.close();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}


class ResPlugin implements Plugin<Project>{

    private Pattern mPattern
    private final static float SCALE = 0.625

    public ResPlugin() {
        println "new ResPlugin"

        mPattern = Pattern.compile("\\d+.?\\d?dp|\\d+.?\\d?dip|\\d+.?\\d?sp")
    }


    @Override
    void apply(Project project) {
        def buildDir = project.buildDir
        if (!buildDir.exists()) {
            buildDir.mkdir()
        }
        println "" + buildDir
        def newSrcDirs = new ArrayList<File>()

        def srcDirs = project.android.sourceSets.main.res.srcDirs
        for (int i = 0; i < srcDirs.size(); i++) {
            def resDir = srcDirs[i]
            def copyDir = new File(buildDir, "res$i")
            copyDir.delete()
            if (!copyDir.exists()) {
                copyDir.mkdir()
            }
            resDir.listFiles().each {
                def resTypeDir = it.absolutePath
                def newPath = new File(resTypeDir.replace(resDir.absolutePath, copyDir.absolutePath))
                if (!newPath.exists()) {
                    newPath.mkdir()
                }
                it.listFiles().each { f ->

                    if (f.getName().endsWith(".xml")) {
                        String newContent = doMigrate(f)
                        FileUtils.saveFileToFolder(newPath, f.name, newContent)
                    } else {
                        copyFiles(f, newPath)
                    }
                }
            }
            newSrcDirs.add(copyDir)
        }

        project.android.sourceSets.main.res.srcDirs = newSrcDirs
    }


    String doMigrate(File source) {
        StringBuffer sb = new StringBuffer()
        source.eachLine {

            StringBuffer lineSB = new StringBuffer()
            Matcher m = mPattern.matcher(it)

            while (m.find()) {
                def origin = m.group()
                boolean isSp = origin.contains("sp")
                if (isSp) {
                    def sizeStr = origin.substring(0, origin.indexOf('sp'))
                    def size = Float.valueOf(sizeStr)
                    def newSize = Math.round(size * SCALE)
                    if (newSize % 2 != 0) {
                        newSize += 1
                    }
                    m.appendReplacement(lineSB, newSize + "sp")
                } else {
                    def sizeStr = origin.substring(0, origin.indexOf('d'))
                    def size = Float.valueOf(sizeStr)
                    def newSize = Math.round(size * SCALE)
                    if (newSize % 2 != 0) {
                        newSize += 1
                    }
                    m.appendReplacement(lineSB, newSize + "dp")
                }

            }

            m.appendTail(lineSB)
            sb.append(lineSB).append("\n")

        }
    }

    void copyFiles(File file, File path) {
        FileChannel inputChannel = null;
        FileChannel outputChannel = null;
        def dest = path.absolutePath + File.separator + file.name
        try {
            inputChannel = new FileInputStream(file).getChannel()
            outputChannel = new FileOutputStream(dest).getChannel()
            outputChannel.transferFrom(inputChannel, 0, inputChannel.size());
        } catch (Exception e) {
            println "copy error : ${e.message}"
        } finally {
            inputChannel.close()
            outputChannel.close()
        }
    }

}

Task


apply plugin: ResPlugin